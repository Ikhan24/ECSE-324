
C:/Users/Admin/Desktop/WINTER 2019/ECSE 324/G29lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	74 13 00 00 80 13 00 00 8c 13 00 00 98 13 00 00     t...............
  30:	a4 13 00 00 b4 17 00 00 1c 12 00 00 b0 13 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00059d 	bl	1750 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000018a4 	.word	0x000018a4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001ce0 	.word	0x00001ce0

00000124 <__cs3_heap_start_ptr>:
     124:	00001d08 	.word	0x00001d08

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001ce8 	.word	0x00001ce8
     170:	00001ceb 	.word	0x00001ceb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001ce8 	.word	0x00001ce8
     1bc:	00001ce8 	.word	0x00001ce8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001ce8 	.word	0x00001ce8
     200:	00000000 	.word	0x00000000
     204:	00001840 	.word	0x00001840

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001840 	.word	0x00001840
     250:	00001cec 	.word	0x00001cec
     254:	000018a8 	.word	0x000018a8
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd028 	sub	sp, sp, #40	; 0x28
	
	HPS_TIM_config_t hps_tim0;
	HPS_TIM_config_t hps_tim1;

	part1();		//Uncomment to use part 1 - flood/clear/write
     268:	eb000003 	bl	27c <part1>
	//part2(hps_tim0, hps_tim1);	//Uncomment to use part 2 - io
	//part3(hps_tim0);	//Uncomment to use part 3 - interrupts

	return 0;
     26c:	e3a03000 	mov	r3, #0
}
     270:	e1a00003 	mov	r0, r3
     274:	e24bd004 	sub	sp, r11, #4
     278:	e8bd8800 	pop	{r11, pc}

0000027c <part1>:

int part1(){
     27c:	e92d4800 	push	{r11, lr}
     280:	e28db004 	add	r11, sp, #4
     284:	ea000000 	b	28c <part1+0x10>
		}		
		
		if(read_slider_switches_ASM() >= 512){	//2^9 for switch 9
			HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5);	//Clear all
		}
	}
     288:	e1a00000 	nop			; (mov r0, r0)
}

int part1(){
	while(1){
		
		write_LEDs_ASM(read_slider_switches_ASM());	//Light up LED when switches turned on
     28c:	eb000367 	bl	1030 <read_slider_switches_ASM>
     290:	e1a03000 	mov	r3, r0
     294:	e1a00003 	mov	r0, r3
     298:	eb000327 	bl	f3c <write_LEDs_ASM>
		//HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3);		
		HEX_flood_ASM(HEX4|HEX5);	//Flood last 2
     29c:	e3a00030 	mov	r0, #48	; 0x30
     2a0:	eb00021d 	bl	b1c <HEX_flood_ASM>
	
		
		switch(PB_data_is_pressed_ASM(read_PB_data_ASM())){		//Get button number that is pressed
     2a4:	eb000328 	bl	f4c <read_PB_data_ASM>
     2a8:	e1a03000 	mov	r3, r0
     2ac:	e6ef3073 	uxtb	r3, r3
     2b0:	e1a00003 	mov	r0, r3
     2b4:	eb000327 	bl	f58 <PB_data_is_pressed_ASM>
     2b8:	e1a03000 	mov	r3, r0
     2bc:	e3530003 	cmp	r3, #3
     2c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     2c4:	ea000027 	b	368 <part1+0xec>
     2c8:	000002d8 	.word	0x000002d8
     2cc:	000002fc 	.word	0x000002fc
     2d0:	00000320 	.word	0x00000320
     2d4:	00000344 	.word	0x00000344
			case 0:
				HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3);
     2d8:	e3a0000f 	mov	r0, #15
     2dc:	eb0001ef 	bl	aa0 <HEX_clear_ASM>
				HEX_write_ASM(HEX0, read_slider_switches_ASM());	//If 1, display on hex0
     2e0:	eb000352 	bl	1030 <read_slider_switches_ASM>
     2e4:	e1a03000 	mov	r3, r0
     2e8:	e6ef3073 	uxtb	r3, r3
     2ec:	e3a00001 	mov	r0, #1
     2f0:	e1a01003 	mov	r1, r3
     2f4:	eb000227 	bl	b98 <HEX_write_ASM>
				break;
     2f8:	ea00001a 	b	368 <part1+0xec>
			case 1:
				HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3);
     2fc:	e3a0000f 	mov	r0, #15
     300:	eb0001e6 	bl	aa0 <HEX_clear_ASM>
				HEX_write_ASM(HEX1, read_slider_switches_ASM());	//If 2, display on hex1
     304:	eb000349 	bl	1030 <read_slider_switches_ASM>
     308:	e1a03000 	mov	r3, r0
     30c:	e6ef3073 	uxtb	r3, r3
     310:	e3a00002 	mov	r0, #2
     314:	e1a01003 	mov	r1, r3
     318:	eb00021e 	bl	b98 <HEX_write_ASM>
				break;
     31c:	ea000011 	b	368 <part1+0xec>
			case 2:
				HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3);
     320:	e3a0000f 	mov	r0, #15
     324:	eb0001dd 	bl	aa0 <HEX_clear_ASM>
				HEX_write_ASM(HEX2, read_slider_switches_ASM());	//If 3, display on hex2
     328:	eb000340 	bl	1030 <read_slider_switches_ASM>
     32c:	e1a03000 	mov	r3, r0
     330:	e6ef3073 	uxtb	r3, r3
     334:	e3a00004 	mov	r0, #4
     338:	e1a01003 	mov	r1, r3
     33c:	eb000215 	bl	b98 <HEX_write_ASM>
				break;
     340:	ea000008 	b	368 <part1+0xec>
			case 3:
				HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3);
     344:	e3a0000f 	mov	r0, #15
     348:	eb0001d4 	bl	aa0 <HEX_clear_ASM>
				HEX_write_ASM(HEX3, read_slider_switches_ASM());	//If 4, display on hex3
     34c:	eb000337 	bl	1030 <read_slider_switches_ASM>
     350:	e1a03000 	mov	r3, r0
     354:	e6ef3073 	uxtb	r3, r3
     358:	e3a00008 	mov	r0, #8
     35c:	e1a01003 	mov	r1, r3
     360:	eb00020c 	bl	b98 <HEX_write_ASM>
				break;	
     364:	e1a00000 	nop			; (mov r0, r0)
		}		
		
		if(read_slider_switches_ASM() >= 512){	//2^9 for switch 9
     368:	eb000330 	bl	1030 <read_slider_switches_ASM>
     36c:	e1a02000 	mov	r2, r0
     370:	e30031ff 	movw	r3, #511	; 0x1ff
     374:	e1520003 	cmp	r2, r3
     378:	daffffc2 	ble	288 <part1+0xc>
			HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5);	//Clear all
     37c:	e3a0003f 	mov	r0, #63	; 0x3f
     380:	eb0001c6 	bl	aa0 <HEX_clear_ASM>
		}
	}
     384:	eaffffbf 	b	288 <part1+0xc>

00000388 <part2>:
	return 0;
}

int part2(HPS_TIM_config_t hps_tim0, HPS_TIM_config_t hps_tim1){
     388:	e24dd010 	sub	sp, sp, #16
     38c:	e92d4800 	push	{r11, lr}
     390:	e28db004 	add	r11, sp, #4
     394:	e24dd020 	sub	sp, sp, #32
     398:	e28bc004 	add	r12, r11, #4
     39c:	e88c000f 	stm	r12, {r0, r1, r2, r3}

	int count0 = 0, count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0;	//Set counters for minutes, seconds, millis
     3a0:	e3a03000 	mov	r3, #0
     3a4:	e50b3008 	str	r3, [r11, #-8]
     3a8:	e3a03000 	mov	r3, #0
     3ac:	e50b300c 	str	r3, [r11, #-12]
     3b0:	e3a03000 	mov	r3, #0
     3b4:	e50b3010 	str	r3, [r11, #-16]
     3b8:	e3a03000 	mov	r3, #0
     3bc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     3c0:	e3a03000 	mov	r3, #0
     3c4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     3c8:	e3a03000 	mov	r3, #0
     3cc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int start = 0;	//Do not start if button not pressed
     3d0:	e3a03000 	mov	r3, #0
     3d4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	hps_tim0.tim = TIM0;
     3d8:	e3a03001 	mov	r3, #1
     3dc:	e5cb3004 	strb	r3, [r11, #4]
	hps_tim0.timeout = 10000; //For timer
     3e0:	e3023710 	movw	r3, #10000	; 0x2710
     3e4:	e58b3008 	str	r3, [r11, #8]
	hps_tim0.LD_en = 1;
     3e8:	e3a03001 	mov	r3, #1
     3ec:	e58b300c 	str	r3, [r11, #12]
	hps_tim0.INT_en = 1;
     3f0:	e3a03001 	mov	r3, #1
     3f4:	e58b3010 	str	r3, [r11, #16]
	hps_tim0.enable = 1;
     3f8:	e3a03001 	mov	r3, #1
     3fc:	e58b3014 	str	r3, [r11, #20]

	hps_tim1.tim = TIM1;
     400:	e3a03002 	mov	r3, #2
     404:	e5cb3018 	strb	r3, [r11, #24]
	hps_tim1.timeout = 5000;	//For buttons
     408:	e3013388 	movw	r3, #5000	; 0x1388
     40c:	e58b301c 	str	r3, [r11, #28]
	hps_tim1.LD_en = 1;
     410:	e3a03001 	mov	r3, #1
     414:	e58b3020 	str	r3, [r11, #32]
	hps_tim1.INT_en = 1;
     418:	e3a03001 	mov	r3, #1
     41c:	e58b3024 	str	r3, [r11, #36]	; 0x24
	hps_tim1.enable = 1;
     420:	e3a03001 	mov	r3, #1
     424:	e58b3028 	str	r3, [r11, #40]	; 0x28

	HPS_TIM_config_ASM(&hps_tim0);
     428:	e28b3004 	add	r3, r11, #4
     42c:	e1a00003 	mov	r0, r3
     430:	eb000239 	bl	d1c <HPS_TIM_config_ASM>
	HPS_TIM_config_ASM(&hps_tim1);
     434:	e28b3018 	add	r3, r11, #24
     438:	e1a00003 	mov	r0, r3
     43c:	eb000236 	bl	d1c <HPS_TIM_config_ASM>

	HEX_write_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5, 0);	//Set all to 0
     440:	e3a0003f 	mov	r0, #63	; 0x3f
     444:	e3a01000 	mov	r1, #0
     448:	eb0001d2 	bl	b98 <HEX_write_ASM>
     44c:	ea000000 	b	454 <part2+0xcc>
				HEX_write_ASM(HEX3, count3);
				HEX_write_ASM(HEX4, count4);
				HEX_write_ASM(HEX5, count5);
			}
		}
	}
     450:	e1a00000 	nop			; (mov r0, r0)

	HEX_write_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5, 0);	//Set all to 0
	
	while(1){

		if(start){	//Only run stopwatch if program started
     454:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     458:	e3530000 	cmp	r3, #0
     45c:	0a000054 	beq	5b4 <part2+0x22c>
				
			if(HPS_TIM_read_INT_ASM(TIM0)){	//Read for timer
     460:	e3a00001 	mov	r0, #1
     464:	eb000272 	bl	e34 <HPS_TIM_read_INT_ASM>
     468:	e1a03000 	mov	r3, r0
     46c:	e3530000 	cmp	r3, #0
     470:	0a00004f 	beq	5b4 <part2+0x22c>
				HPS_TIM_clear_INT_ASM(TIM0);
     474:	e3a00001 	mov	r0, #1
     478:	eb00025c 	bl	df0 <HPS_TIM_clear_INT_ASM>
				if(++count0 == 10){		//Increment last digit until reaches 10, then increment next digit
     47c:	e51b3008 	ldr	r3, [r11, #-8]
     480:	e2833001 	add	r3, r3, #1
     484:	e50b3008 	str	r3, [r11, #-8]
     488:	e51b3008 	ldr	r3, [r11, #-8]
     48c:	e353000a 	cmp	r3, #10
     490:	1a000004 	bne	4a8 <part2+0x120>
					count0=0;
     494:	e3a03000 	mov	r3, #0
     498:	e50b3008 	str	r3, [r11, #-8]
					count1++;
     49c:	e51b300c 	ldr	r3, [r11, #-12]
     4a0:	e2833001 	add	r3, r3, #1
     4a4:	e50b300c 	str	r3, [r11, #-12]
				}
				if(count1 == 10){	//Increment digit until reaches 10, then increment next digit
     4a8:	e51b300c 	ldr	r3, [r11, #-12]
     4ac:	e353000a 	cmp	r3, #10
     4b0:	1a000004 	bne	4c8 <part2+0x140>
					count1=0;
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e50b300c 	str	r3, [r11, #-12]
					count2++;
     4bc:	e51b3010 	ldr	r3, [r11, #-16]
     4c0:	e2833001 	add	r3, r3, #1
     4c4:	e50b3010 	str	r3, [r11, #-16]
				}
				if(count2 == 10){	//Increment digit until reaches 10, then increment next digit
     4c8:	e51b3010 	ldr	r3, [r11, #-16]
     4cc:	e353000a 	cmp	r3, #10
     4d0:	1a000004 	bne	4e8 <part2+0x160>
					count2=0;
     4d4:	e3a03000 	mov	r3, #0
     4d8:	e50b3010 	str	r3, [r11, #-16]
					count3++;
     4dc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4e0:	e2833001 	add	r3, r3, #1
     4e4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}
				if(count3 == 6){ //Increment digit until reaches 10, then increment next digit
     4e8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4ec:	e3530006 	cmp	r3, #6
     4f0:	1a000004 	bne	508 <part2+0x180>
					count3=0;
     4f4:	e3a03000 	mov	r3, #0
     4f8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					count4++;
     4fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     500:	e2833001 	add	r3, r3, #1
     504:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				}
				if(count4 == 10){ //Increment digit until reaches 6, then increment next digit
     508:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     50c:	e353000a 	cmp	r3, #10
     510:	1a000004 	bne	528 <part2+0x1a0>
					count4=0;
     514:	e3a03000 	mov	r3, #0
     518:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
					count5++;
     51c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     520:	e2833001 	add	r3, r3, #1
     524:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
				if(count5 == 6){ //Increment digit until reaches 6, then reset since we reached 60 min
     528:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     52c:	e3530006 	cmp	r3, #6
     530:	1a000001 	bne	53c <part2+0x1b4>
					count5=0;
     534:	e3a03000 	mov	r3, #0
     538:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
			
				HEX_write_ASM(HEX0, count0);
     53c:	e51b3008 	ldr	r3, [r11, #-8]
     540:	e6ef3073 	uxtb	r3, r3
     544:	e3a00001 	mov	r0, #1
     548:	e1a01003 	mov	r1, r3
     54c:	eb000191 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX1, count1);
     550:	e51b300c 	ldr	r3, [r11, #-12]
     554:	e6ef3073 	uxtb	r3, r3
     558:	e3a00002 	mov	r0, #2
     55c:	e1a01003 	mov	r1, r3
     560:	eb00018c 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX2, count2);
     564:	e51b3010 	ldr	r3, [r11, #-16]
     568:	e6ef3073 	uxtb	r3, r3
     56c:	e3a00004 	mov	r0, #4
     570:	e1a01003 	mov	r1, r3
     574:	eb000187 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX3, count3);
     578:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     57c:	e6ef3073 	uxtb	r3, r3
     580:	e3a00008 	mov	r0, #8
     584:	e1a01003 	mov	r1, r3
     588:	eb000182 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX4, count4);
     58c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     590:	e6ef3073 	uxtb	r3, r3
     594:	e3a00010 	mov	r0, #16
     598:	e1a01003 	mov	r1, r3
     59c:	eb00017d 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX5, count5);	//Write all digits to their screens
     5a0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     5a4:	e6ef3073 	uxtb	r3, r3
     5a8:	e3a00020 	mov	r0, #32
     5ac:	e1a01003 	mov	r1, r3
     5b0:	eb000178 	bl	b98 <HEX_write_ASM>
			}
		}

		if(HPS_TIM_read_INT_ASM(TIM1)){	//Read for buttons
     5b4:	e3a00002 	mov	r0, #2
     5b8:	eb00021d 	bl	e34 <HPS_TIM_read_INT_ASM>
     5bc:	e1a03000 	mov	r3, r0
     5c0:	e3530000 	cmp	r3, #0
     5c4:	0affffa1 	beq	450 <part2+0xc8>
			HPS_TIM_clear_INT_ASM(TIM1);
     5c8:	e3a00002 	mov	r0, #2
     5cc:	eb000207 	bl	df0 <HPS_TIM_clear_INT_ASM>

			if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 0)	//If button 1 is pressed, the program starts/resumes
     5d0:	eb00025d 	bl	f4c <read_PB_data_ASM>
     5d4:	e1a03000 	mov	r3, r0
     5d8:	e6ef3073 	uxtb	r3, r3
     5dc:	e1a00003 	mov	r0, r3
     5e0:	eb00025c 	bl	f58 <PB_data_is_pressed_ASM>
     5e4:	e1a03000 	mov	r3, r0
     5e8:	e3530000 	cmp	r3, #0
     5ec:	1a000001 	bne	5f8 <part2+0x270>
				start = 1;
     5f0:	e3a03001 	mov	r3, #1
     5f4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

			if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 1){	//If button 2 is pressed, the program pauses
     5f8:	eb000253 	bl	f4c <read_PB_data_ASM>
     5fc:	e1a03000 	mov	r3, r0
     600:	e6ef3073 	uxtb	r3, r3
     604:	e1a00003 	mov	r0, r3
     608:	eb000252 	bl	f58 <PB_data_is_pressed_ASM>
     60c:	e1a03000 	mov	r3, r0
     610:	e3530001 	cmp	r3, #1
     614:	1a000016 	bne	674 <part2+0x2ec>
				start = 0;
     618:	e3a03000 	mov	r3, #0
     61c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     620:	ea000000 	b	628 <part2+0x2a0>
				while(1){	//The program only breaks from the loop and continues if start or reset are pressed
					if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 0 || PB_data_is_pressed_ASM(read_PB_data_ASM()) == 2){
						start = 1;
						break;
					}
				}	
     624:	e1a00000 	nop			; (mov r0, r0)
				start = 1;

			if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 1){	//If button 2 is pressed, the program pauses
				start = 0;
				while(1){	//The program only breaks from the loop and continues if start or reset are pressed
					if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 0 || PB_data_is_pressed_ASM(read_PB_data_ASM()) == 2){
     628:	eb000247 	bl	f4c <read_PB_data_ASM>
     62c:	e1a03000 	mov	r3, r0
     630:	e6ef3073 	uxtb	r3, r3
     634:	e1a00003 	mov	r0, r3
     638:	eb000246 	bl	f58 <PB_data_is_pressed_ASM>
     63c:	e1a03000 	mov	r3, r0
     640:	e3530000 	cmp	r3, #0
     644:	0a000007 	beq	668 <part2+0x2e0>
     648:	eb00023f 	bl	f4c <read_PB_data_ASM>
     64c:	e1a03000 	mov	r3, r0
     650:	e6ef3073 	uxtb	r3, r3
     654:	e1a00003 	mov	r0, r3
     658:	eb00023e 	bl	f58 <PB_data_is_pressed_ASM>
     65c:	e1a03000 	mov	r3, r0
     660:	e3530002 	cmp	r3, #2
     664:	1affffee 	bne	624 <part2+0x29c>
						start = 1;
     668:	e3a03001 	mov	r3, #1
     66c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
						break;
     670:	e1a00000 	nop			; (mov r0, r0)
					}
				}	
			}
			if(PB_data_is_pressed_ASM(read_PB_data_ASM()) == 2){	//If reset is pressed all counts are set to 0 on the displays
     674:	eb000234 	bl	f4c <read_PB_data_ASM>
     678:	e1a03000 	mov	r3, r0
     67c:	e6ef3073 	uxtb	r3, r3
     680:	e1a00003 	mov	r0, r3
     684:	eb000233 	bl	f58 <PB_data_is_pressed_ASM>
     688:	e1a03000 	mov	r3, r0
     68c:	e3530002 	cmp	r3, #2
     690:	1affff6e 	bne	450 <part2+0xc8>
				count0 =0;
     694:	e3a03000 	mov	r3, #0
     698:	e50b3008 	str	r3, [r11, #-8]
				count1=0;
     69c:	e3a03000 	mov	r3, #0
     6a0:	e50b300c 	str	r3, [r11, #-12]
				count2=0;
     6a4:	e3a03000 	mov	r3, #0
     6a8:	e50b3010 	str	r3, [r11, #-16]
				count3=0;
     6ac:	e3a03000 	mov	r3, #0
     6b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				count4=0;
     6b4:	e3a03000 	mov	r3, #0
     6b8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				count5=0;
     6bc:	e3a03000 	mov	r3, #0
     6c0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

				HEX_write_ASM(HEX0, count0);
     6c4:	e51b3008 	ldr	r3, [r11, #-8]
     6c8:	e6ef3073 	uxtb	r3, r3
     6cc:	e3a00001 	mov	r0, #1
     6d0:	e1a01003 	mov	r1, r3
     6d4:	eb00012f 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX1, count1);
     6d8:	e51b300c 	ldr	r3, [r11, #-12]
     6dc:	e6ef3073 	uxtb	r3, r3
     6e0:	e3a00002 	mov	r0, #2
     6e4:	e1a01003 	mov	r1, r3
     6e8:	eb00012a 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX2, count2);
     6ec:	e51b3010 	ldr	r3, [r11, #-16]
     6f0:	e6ef3073 	uxtb	r3, r3
     6f4:	e3a00004 	mov	r0, #4
     6f8:	e1a01003 	mov	r1, r3
     6fc:	eb000125 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX3, count3);
     700:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     704:	e6ef3073 	uxtb	r3, r3
     708:	e3a00008 	mov	r0, #8
     70c:	e1a01003 	mov	r1, r3
     710:	eb000120 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX4, count4);
     714:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     718:	e6ef3073 	uxtb	r3, r3
     71c:	e3a00010 	mov	r0, #16
     720:	e1a01003 	mov	r1, r3
     724:	eb00011b 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX5, count5);
     728:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     72c:	e6ef3073 	uxtb	r3, r3
     730:	e3a00020 	mov	r0, #32
     734:	e1a01003 	mov	r1, r3
     738:	eb000116 	bl	b98 <HEX_write_ASM>
			}
		}
	}
     73c:	eaffff43 	b	450 <part2+0xc8>

00000740 <part3>:
	return 0;
}

int part3(HPS_TIM_config_t hps_tim){
     740:	e24dd010 	sub	sp, sp, #16
     744:	e92d4800 	push	{r11, lr}
     748:	e28db004 	add	r11, sp, #4
     74c:	e24dd028 	sub	sp, sp, #40	; 0x28
     750:	e28bc004 	add	r12, r11, #4
     754:	e88c000f 	stm	r12, {r0, r1, r2, r3}

	int_setup(2, (int []){199, 73});	//Set up timer and button interrupt
     758:	e3013844 	movw	r3, #6212	; 0x1844
     75c:	e3403000 	movt	r3, #0
     760:	e24b2028 	sub	r2, r11, #40	; 0x28
     764:	e8930003 	ldm	r3, {r0, r1}
     768:	e8820003 	stm	r2, {r0, r1}
     76c:	e24b3028 	sub	r3, r11, #40	; 0x28
     770:	e3a00002 	mov	r0, #2
     774:	e1a01003 	mov	r1, r3
     778:	eb00031b 	bl	13ec <int_setup>

	int count0 = 0, count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0;
     77c:	e3a03000 	mov	r3, #0
     780:	e50b3008 	str	r3, [r11, #-8]
     784:	e3a03000 	mov	r3, #0
     788:	e50b300c 	str	r3, [r11, #-12]
     78c:	e3a03000 	mov	r3, #0
     790:	e50b3010 	str	r3, [r11, #-16]
     794:	e3a03000 	mov	r3, #0
     798:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     79c:	e3a03000 	mov	r3, #0
     7a0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     7a4:	e3a03000 	mov	r3, #0
     7a8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int start = 0;
     7ac:	e3a03000 	mov	r3, #0
     7b0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	hps_tim.tim = TIM0;
     7b4:	e3a03001 	mov	r3, #1
     7b8:	e5cb3004 	strb	r3, [r11, #4]
	hps_tim.timeout = 10000;
     7bc:	e3023710 	movw	r3, #10000	; 0x2710
     7c0:	e58b3008 	str	r3, [r11, #8]
	hps_tim.LD_en = 1;
     7c4:	e3a03001 	mov	r3, #1
     7c8:	e58b300c 	str	r3, [r11, #12]
	hps_tim.INT_en = 1;
     7cc:	e3a03001 	mov	r3, #1
     7d0:	e58b3010 	str	r3, [r11, #16]
	hps_tim.enable = 1;
     7d4:	e3a03001 	mov	r3, #1
     7d8:	e58b3014 	str	r3, [r11, #20]

	HPS_TIM_config_ASM(&hps_tim);
     7dc:	e28b3004 	add	r3, r11, #4
     7e0:	e1a00003 	mov	r0, r3
     7e4:	eb00014c 	bl	d1c <HPS_TIM_config_ASM>

	HEX_write_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5, 0);
     7e8:	e3a0003f 	mov	r0, #63	; 0x3f
     7ec:	e3a01000 	mov	r1, #0
     7f0:	eb0000e8 	bl	b98 <HEX_write_ASM>
     7f4:	ea000000 	b	7fc <part3+0xbc>
			HEX_write_ASM(HEX3, count3);
			HEX_write_ASM(HEX4, count4);
			HEX_write_ASM(HEX5, count5);	//Clear all and write to displays
			//button_interrupt_flag = 4;
		}
	}
     7f8:	e1a00000 	nop			; (mov r0, r0)

	HEX_write_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5, 0);
	
	while(1){		
	
		enable_PB_INT_ASM(PB0|PB1|PB2);
     7fc:	e3a00007 	mov	r0, #7
     800:	eb0001f8 	bl	fe8 <enable_PB_INT_ASM>
		if(start){
     804:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     808:	e3530000 	cmp	r3, #0
     80c:	0a000056 	beq	96c <part3+0x22c>
			if(hps_tim0_int_flag){	//Check interrupt flag for timer
     810:	e3003ea8 	movw	r3, #3752	; 0xea8
     814:	e3403000 	movt	r3, #0
     818:	e5933000 	ldr	r3, [r3]
     81c:	e3530000 	cmp	r3, #0
     820:	0a000051 	beq	96c <part3+0x22c>
				hps_tim0_int_flag = 0;	
     824:	e3003ea8 	movw	r3, #3752	; 0xea8
     828:	e3403000 	movt	r3, #0
     82c:	e3a02000 	mov	r2, #0
     830:	e5832000 	str	r2, [r3]
				if(++count0 == 10){
     834:	e51b3008 	ldr	r3, [r11, #-8]
     838:	e2833001 	add	r3, r3, #1
     83c:	e50b3008 	str	r3, [r11, #-8]
     840:	e51b3008 	ldr	r3, [r11, #-8]
     844:	e353000a 	cmp	r3, #10
     848:	1a000004 	bne	860 <part3+0x120>
					count0=0;
     84c:	e3a03000 	mov	r3, #0
     850:	e50b3008 	str	r3, [r11, #-8]
					count1++;
     854:	e51b300c 	ldr	r3, [r11, #-12]
     858:	e2833001 	add	r3, r3, #1
     85c:	e50b300c 	str	r3, [r11, #-12]
				}
				if(count1 == 10){
     860:	e51b300c 	ldr	r3, [r11, #-12]
     864:	e353000a 	cmp	r3, #10
     868:	1a000004 	bne	880 <part3+0x140>
					count1=0;
     86c:	e3a03000 	mov	r3, #0
     870:	e50b300c 	str	r3, [r11, #-12]
					count2++;
     874:	e51b3010 	ldr	r3, [r11, #-16]
     878:	e2833001 	add	r3, r3, #1
     87c:	e50b3010 	str	r3, [r11, #-16]
				}
				if(count2 == 10){
     880:	e51b3010 	ldr	r3, [r11, #-16]
     884:	e353000a 	cmp	r3, #10
     888:	1a000004 	bne	8a0 <part3+0x160>
					count2=0;
     88c:	e3a03000 	mov	r3, #0
     890:	e50b3010 	str	r3, [r11, #-16]
					count3++;
     894:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     898:	e2833001 	add	r3, r3, #1
     89c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}
				if(count3 == 6){
     8a0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     8a4:	e3530006 	cmp	r3, #6
     8a8:	1a000004 	bne	8c0 <part3+0x180>
					count3=0;
     8ac:	e3a03000 	mov	r3, #0
     8b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					count4++;
     8b4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8b8:	e2833001 	add	r3, r3, #1
     8bc:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				}
				if(count4 == 10){
     8c0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8c4:	e353000a 	cmp	r3, #10
     8c8:	1a000004 	bne	8e0 <part3+0x1a0>
					count4=0;
     8cc:	e3a03000 	mov	r3, #0
     8d0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
					count5++;
     8d4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     8d8:	e2833001 	add	r3, r3, #1
     8dc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
				if(count5 == 6){
     8e0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     8e4:	e3530006 	cmp	r3, #6
     8e8:	1a000001 	bne	8f4 <part3+0x1b4>
					count5=0;
     8ec:	e3a03000 	mov	r3, #0
     8f0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
				HEX_write_ASM(HEX0, count0);
     8f4:	e51b3008 	ldr	r3, [r11, #-8]
     8f8:	e6ef3073 	uxtb	r3, r3
     8fc:	e3a00001 	mov	r0, #1
     900:	e1a01003 	mov	r1, r3
     904:	eb0000a3 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX1, count1);
     908:	e51b300c 	ldr	r3, [r11, #-12]
     90c:	e6ef3073 	uxtb	r3, r3
     910:	e3a00002 	mov	r0, #2
     914:	e1a01003 	mov	r1, r3
     918:	eb00009e 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX2, count2);
     91c:	e51b3010 	ldr	r3, [r11, #-16]
     920:	e6ef3073 	uxtb	r3, r3
     924:	e3a00004 	mov	r0, #4
     928:	e1a01003 	mov	r1, r3
     92c:	eb000099 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX3, count3);
     930:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     934:	e6ef3073 	uxtb	r3, r3
     938:	e3a00008 	mov	r0, #8
     93c:	e1a01003 	mov	r1, r3
     940:	eb000094 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX4, count4);
     944:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     948:	e6ef3073 	uxtb	r3, r3
     94c:	e3a00010 	mov	r0, #16
     950:	e1a01003 	mov	r1, r3
     954:	eb00008f 	bl	b98 <HEX_write_ASM>
				HEX_write_ASM(HEX5, count5);
     958:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     95c:	e6ef3073 	uxtb	r3, r3
     960:	e3a00020 	mov	r0, #32
     964:	e1a01003 	mov	r1, r3
     968:	eb00008a 	bl	b98 <HEX_write_ASM>
			}
		}
		
		if(button_interrupt_flag == 0){	//If 0, start/resume
     96c:	e3003eac 	movw	r3, #3756	; 0xeac
     970:	e3403000 	movt	r3, #0
     974:	e5933000 	ldr	r3, [r3]
     978:	e3530000 	cmp	r3, #0
     97c:	1a000001 	bne	988 <part3+0x248>
			start = 1;
     980:	e3a03001 	mov	r3, #1
     984:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
				//disable_PB_INT_ASM(1);	//Disable the button interrupt for now
		}

		if(button_interrupt_flag == 1){	//If 1, pause
     988:	e3003eac 	movw	r3, #3756	; 0xeac
     98c:	e3403000 	movt	r3, #0
     990:	e5933000 	ldr	r3, [r3]
     994:	e3530001 	cmp	r3, #1
     998:	1a000010 	bne	9e0 <part3+0x2a0>
			start = 0;
     99c:	e3a03000 	mov	r3, #0
     9a0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     9a4:	ea000000 	b	9ac <part3+0x26c>
			while(1){
				if(button_interrupt_flag == 0 || button_interrupt_flag == 2){	
					start = 1;
					break;
				}
			}	
     9a8:	e1a00000 	nop			; (mov r0, r0)

		if(button_interrupt_flag == 1){	//If 1, pause
			start = 0;
			//disable_PB_INT_ASM(2); //Disable the button interrupt for now
			while(1){
				if(button_interrupt_flag == 0 || button_interrupt_flag == 2){	
     9ac:	e3003eac 	movw	r3, #3756	; 0xeac
     9b0:	e3403000 	movt	r3, #0
     9b4:	e5933000 	ldr	r3, [r3]
     9b8:	e3530000 	cmp	r3, #0
     9bc:	0a000004 	beq	9d4 <part3+0x294>
     9c0:	e3003eac 	movw	r3, #3756	; 0xeac
     9c4:	e3403000 	movt	r3, #0
     9c8:	e5933000 	ldr	r3, [r3]
     9cc:	e3530002 	cmp	r3, #2
     9d0:	1afffff4 	bne	9a8 <part3+0x268>
					start = 1;
     9d4:	e3a03001 	mov	r3, #1
     9d8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
					break;
     9dc:	e1a00000 	nop			; (mov r0, r0)
				}
			}	
		}
		if(button_interrupt_flag == 2){	//If button 3, reset
     9e0:	e3003eac 	movw	r3, #3756	; 0xeac
     9e4:	e3403000 	movt	r3, #0
     9e8:	e5933000 	ldr	r3, [r3]
     9ec:	e3530002 	cmp	r3, #2
     9f0:	1affff80 	bne	7f8 <part3+0xb8>
			count0 =0;
     9f4:	e3a03000 	mov	r3, #0
     9f8:	e50b3008 	str	r3, [r11, #-8]
			count1=0;
     9fc:	e3a03000 	mov	r3, #0
     a00:	e50b300c 	str	r3, [r11, #-12]
			count2=0;
     a04:	e3a03000 	mov	r3, #0
     a08:	e50b3010 	str	r3, [r11, #-16]
			count3=0;
     a0c:	e3a03000 	mov	r3, #0
     a10:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			count4=0;
     a14:	e3a03000 	mov	r3, #0
     a18:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			count5=0;
     a1c:	e3a03000 	mov	r3, #0
     a20:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

			HEX_write_ASM(HEX0, count0);
     a24:	e51b3008 	ldr	r3, [r11, #-8]
     a28:	e6ef3073 	uxtb	r3, r3
     a2c:	e3a00001 	mov	r0, #1
     a30:	e1a01003 	mov	r1, r3
     a34:	eb000057 	bl	b98 <HEX_write_ASM>
			HEX_write_ASM(HEX1, count1);
     a38:	e51b300c 	ldr	r3, [r11, #-12]
     a3c:	e6ef3073 	uxtb	r3, r3
     a40:	e3a00002 	mov	r0, #2
     a44:	e1a01003 	mov	r1, r3
     a48:	eb000052 	bl	b98 <HEX_write_ASM>
			HEX_write_ASM(HEX2, count2);
     a4c:	e51b3010 	ldr	r3, [r11, #-16]
     a50:	e6ef3073 	uxtb	r3, r3
     a54:	e3a00004 	mov	r0, #4
     a58:	e1a01003 	mov	r1, r3
     a5c:	eb00004d 	bl	b98 <HEX_write_ASM>
			HEX_write_ASM(HEX3, count3);
     a60:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     a64:	e6ef3073 	uxtb	r3, r3
     a68:	e3a00008 	mov	r0, #8
     a6c:	e1a01003 	mov	r1, r3
     a70:	eb000048 	bl	b98 <HEX_write_ASM>
			HEX_write_ASM(HEX4, count4);
     a74:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a78:	e6ef3073 	uxtb	r3, r3
     a7c:	e3a00010 	mov	r0, #16
     a80:	e1a01003 	mov	r1, r3
     a84:	eb000043 	bl	b98 <HEX_write_ASM>
			HEX_write_ASM(HEX5, count5);	//Clear all and write to displays
     a88:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     a8c:	e6ef3073 	uxtb	r3, r3
     a90:	e3a00020 	mov	r0, #32
     a94:	e1a01003 	mov	r1, r3
     a98:	eb00003e 	bl	b98 <HEX_write_ASM>
			//button_interrupt_flag = 4;
		}
	}
     a9c:	eaffff55 	b	7f8 <part3+0xb8>

00000aa0 <HEX_clear_ASM>:
							.equ HEX5_to_HEX4, 0xFF200030
							.global HEX_clear_ASM
							.global HEX_flood_ASM
							.global HEX_write_ASM

HEX_clear_ASM: 				LDR R1, =HEX3_to_HEX0
     aa0:	e59f126c 	ldr	r1, [pc, #620]	; d14 <WRITETOHEX5_4+0x18>
							MOV R3, #1				//Used to compare 
     aa4:	e3a03001 	mov	r3, #1
							MOV R4, #0				//CTR
     aa8:	e3a04000 	mov	r4, #0

00000aac <LOOP1>:

LOOP1:						CMP R4, #4				//Make sure only looped 3 times
     aac:	e3540004 	cmp	r4, #4
							BGE ENDLOOP1			//Set up for HEX5_4
     ab0:	aa00000a 	bge	ae0 <ENDLOOP1>
							TST R0, R3				//AND with R3
     ab4:	e1100003 	tst	r0, r3
							BNE CLEAR				//If not equal clear
     ab8:	1a000002 	bne	ac8 <CLEAR>
							LSL R3, R3, #1			//Left shift comparison value (one hot)
     abc:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1			//Increment CTR
     ac0:	e2844001 	add	r4, r4, #1
							B LOOP1
     ac4:	eafffff8 	b	aac <LOOP1>

00000ac8 <CLEAR>:

CLEAR:						ADD R5, R4, R1			//Get next HEX location in memory
     ac8:	e0845001 	add	r5, r4, r1
							MOV R7, #0			
     acc:	e3a07000 	mov	r7, #0
							STRB R7, [R5]			//Store 0 into location
     ad0:	e5c57000 	strb	r7, [r5]
							LSL R3, R3, #1			//left shift comparison value
     ad4:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1			//Increment counter
     ad8:	e2844001 	add	r4, r4, #1
							B LOOP1
     adc:	eafffff2 	b	aac <LOOP1>

00000ae0 <ENDLOOP1>:

ENDLOOP1:					LDR R2, =HEX5_to_HEX4	//Memory location for Hex5 and Hex4	
     ae0:	e59f2230 	ldr	r2, [pc, #560]	; d18 <WRITETOHEX5_4+0x1c>
							MOV R4, #0				//Reset counter
     ae4:	e3a04000 	mov	r4, #0

00000ae8 <LOOP2>:
	
LOOP2:						CMP R4, #2				//Check if done			
     ae8:	e3540002 	cmp	r4, #2
							BXGE LR					//If done, end method
     aec:	a12fff1e 	bxge	lr
							TST R0, R3				//Compare HEX to one-hot value
     af0:	e1100003 	tst	r0, r3
							BNE CLEAR2				//If not equal, clear
     af4:	1a000002 	bne	b04 <CLEAR2>
							LSL R3, R3, #1			//Leftshift
     af8:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1			//Increment counter
     afc:	e2844001 	add	r4, r4, #1
							B LOOP2
     b00:	eafffff8 	b	ae8 <LOOP2>

00000b04 <CLEAR2>:

CLEAR2:						ADD R5, R4, R2			//Get next HEX location in memory
     b04:	e0845002 	add	r5, r4, r2
							MOV R7, #0
     b08:	e3a07000 	mov	r7, #0
							STRB R7, [R5]			//Store 0 into location
     b0c:	e5c57000 	strb	r7, [r5]
							LSL R3, R3, #1
     b10:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1
     b14:	e2844001 	add	r4, r4, #1
							B LOOP2					
     b18:	eafffff2 	b	ae8 <LOOP2>

00000b1c <HEX_flood_ASM>:

HEX_flood_ASM:				LDR R1, =HEX3_to_HEX0
     b1c:	e59f11f0 	ldr	r1, [pc, #496]	; d14 <WRITETOHEX5_4+0x18>
							MOV R3, #1				//Used to compare 
     b20:	e3a03001 	mov	r3, #1
							MOV R4, #0				//CTR
     b24:	e3a04000 	mov	r4, #0

00000b28 <LOOPF1>:

LOOPF1:						CMP R4, #4				//Make sure only looped 3 times
     b28:	e3540004 	cmp	r4, #4
							BGE ENDLOOPF1	
     b2c:	aa00000a 	bge	b5c <ENDLOOPF1>
							TST R0, R3				//AND with R3
     b30:	e1100003 	tst	r0, r3
							BNE FLOOD				//If not equal FLOOD
     b34:	1a000002 	bne	b44 <FLOOD>
							LSL R3, R3, #1			//Left shift
     b38:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1			//Increment Counter
     b3c:	e2844001 	add	r4, r4, #1
							B LOOPF1
     b40:	eafffff8 	b	b28 <LOOPF1>

00000b44 <FLOOD>:

FLOOD:						ADD R5, R4, R1			//Get next location in memory of HEX
     b44:	e0845001 	add	r5, r4, r1
							MOV R7, #255	
     b48:	e3a070ff 	mov	r7, #255	; 0xff
							STRB R7, [R5]			//Store 255 to memory
     b4c:	e5c57000 	strb	r7, [r5]
							LSL R3, R3, #1			//Leftshift
     b50:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1			//Counter
     b54:	e2844001 	add	r4, r4, #1
							B LOOPF1
     b58:	eafffff2 	b	b28 <LOOPF1>

00000b5c <ENDLOOPF1>:

ENDLOOPF1:					LDR R2, =HEX5_to_HEX4	//For HEX 4 and 5
     b5c:	e59f21b4 	ldr	r2, [pc, #436]	; d18 <WRITETOHEX5_4+0x1c>
							MOV R4, #0
     b60:	e3a04000 	mov	r4, #0

00000b64 <LOOPF2>:

LOOPF2:						CMP R4, #2				//Do the same as LOOPF1 and FLOOD1
     b64:	e3540002 	cmp	r4, #2
							BXGE LR
     b68:	a12fff1e 	bxge	lr
							TST R0, R3
     b6c:	e1100003 	tst	r0, r3
							BNE FLOOD2
     b70:	1a000002 	bne	b80 <FLOOD2>
							LSL R3, R3, #1
     b74:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1
     b78:	e2844001 	add	r4, r4, #1
							B LOOPF2
     b7c:	eafffff8 	b	b64 <LOOPF2>

00000b80 <FLOOD2>:

FLOOD2:						ADD R5, R4, R2
     b80:	e0845002 	add	r5, r4, r2
							MOV R7, #255
     b84:	e3a070ff 	mov	r7, #255	; 0xff
							STRB R7, [R5]
     b88:	e5c57000 	strb	r7, [r5]
							LSL R3, R3, #1
     b8c:	e1a03083 	lsl	r3, r3, #1
							ADD R4, R4, #1
     b90:	e2844001 	add	r4, r4, #1
							B LOOPF2	
     b94:	eafffff2 	b	b64 <LOOPF2>

00000b98 <HEX_write_ASM>:
								
HEX_write_ASM:				LDR R2, =HEX3_to_HEX0
     b98:	e59f2174 	ldr	r2, [pc, #372]	; d14 <WRITETOHEX5_4+0x18>
							LDR R3, =HEX5_to_HEX4
     b9c:	e59f3174 	ldr	r3, [pc, #372]	; d18 <WRITETOHEX5_4+0x1c>
							MOV R4, #1				//Used to compare to HEX signals
     ba0:	e3a04001 	mov	r4, #1
							MOV R5, #0				//Counter
     ba4:	e3a05000 	mov	r5, #0

00000ba8 <CHECKIF0>:

CHECKIF0:					CMP R1, #0				//Check if parameter value is 0
     ba8:	e3510000 	cmp	r1, #0
							BNE CHECKIF1			//If not check if 1...
     bac:	1a000001 	bne	bb8 <CHECKIF1>
							MOV R1, #63 			//Move value 0111111 into R1 for later use
     bb0:	e3a0103f 	mov	r1, #63	; 0x3f
							B WRITE					//Start writing
     bb4:	ea00003b 	b	ca8 <WRITE>

00000bb8 <CHECKIF1>:

CHECKIF1:					CMP R1, #1				//Check if parameter value is 1
     bb8:	e3510001 	cmp	r1, #1
							BNE CHECKIF2			//If not check if 2...
     bbc:	1a000001 	bne	bc8 <CHECKIF2>
							MOV R1, #6 				//Move value 0000110 into R1 for later use
     bc0:	e3a01006 	mov	r1, #6
							B WRITE					//Start writing
     bc4:	ea000037 	b	ca8 <WRITE>

00000bc8 <CHECKIF2>:

CHECKIF2:					CMP R1, #2				//Check if parameter value is 2
     bc8:	e3510002 	cmp	r1, #2
							BNE CHECKIF3			//If not check if 3...
     bcc:	1a000001 	bne	bd8 <CHECKIF3>
							MOV R1, #91 			//Move value 1011011 into R1 for later use
     bd0:	e3a0105b 	mov	r1, #91	; 0x5b
							B WRITE					//Start writing
     bd4:	ea000033 	b	ca8 <WRITE>

00000bd8 <CHECKIF3>:

CHECKIF3:					CMP R1, #3				//Check if parameter value is 3
     bd8:	e3510003 	cmp	r1, #3
							BNE CHECKIF4			//If not check if 4...
     bdc:	1a000001 	bne	be8 <CHECKIF4>
							MOV R1, #79 			//Move value 1001111 into R1 for later use
     be0:	e3a0104f 	mov	r1, #79	; 0x4f
							B WRITE					//Start writing
     be4:	ea00002f 	b	ca8 <WRITE>

00000be8 <CHECKIF4>:

CHECKIF4:					CMP R1, #4				//Check if parameter value is 4
     be8:	e3510004 	cmp	r1, #4
							BNE CHECKIF5			//If not check if 5...
     bec:	1a000001 	bne	bf8 <CHECKIF5>
							MOV R1, #102 			//Move value 1100110 into R1 for later use
     bf0:	e3a01066 	mov	r1, #102	; 0x66
							B WRITE					//Start writing
     bf4:	ea00002b 	b	ca8 <WRITE>

00000bf8 <CHECKIF5>:

CHECKIF5:					CMP R1, #5				//Check if parameter value is 5
     bf8:	e3510005 	cmp	r1, #5
							BNE CHECKIF6			//If not check if 6...
     bfc:	1a000001 	bne	c08 <CHECKIF6>
							MOV R1, #109 			//Move value 1101101 into R1 for later use
     c00:	e3a0106d 	mov	r1, #109	; 0x6d
							B WRITE					//Start writing
     c04:	ea000027 	b	ca8 <WRITE>

00000c08 <CHECKIF6>:

CHECKIF6:					CMP R1, #6				//Check if parameter value is 6
     c08:	e3510006 	cmp	r1, #6
							BNE CHECKIF7			//If not check if 7...
     c0c:	1a000001 	bne	c18 <CHECKIF7>
							MOV R1, #125 			//Move value 1111101 into R1 for later use
     c10:	e3a0107d 	mov	r1, #125	; 0x7d
							B WRITE					//Start writing
     c14:	ea000023 	b	ca8 <WRITE>

00000c18 <CHECKIF7>:

CHECKIF7:					CMP R1, #7				//Check if parameter value is 7
     c18:	e3510007 	cmp	r1, #7
							BNE CHECKIF8			//If not check if 8...
     c1c:	1a000001 	bne	c28 <CHECKIF8>
							MOV R1, #39 			//Move value 0100111 into R1 for later use
     c20:	e3a01027 	mov	r1, #39	; 0x27
							B WRITE					//Start writing
     c24:	ea00001f 	b	ca8 <WRITE>

00000c28 <CHECKIF8>:

CHECKIF8:					CMP R1, #8				//Check if parameter value is 8
     c28:	e3510008 	cmp	r1, #8
							BNE CHECKIF9			//If not check if 9...
     c2c:	1a000001 	bne	c38 <CHECKIF9>
							MOV R1, #127 			//Move value 1111111 into R1 for later use
     c30:	e3a0107f 	mov	r1, #127	; 0x7f
							B WRITE					//Start writing
     c34:	ea00001b 	b	ca8 <WRITE>

00000c38 <CHECKIF9>:

CHECKIF9:					CMP R1, #9				//Check if parameter value is 9
     c38:	e3510009 	cmp	r1, #9
							BNE CHECKIFA			//If not check if 10...
     c3c:	1a000001 	bne	c48 <CHECKIFA>
							MOV R1, #111 			//Move value 1101111 into R1 for later use
     c40:	e3a0106f 	mov	r1, #111	; 0x6f
							B WRITE					//Start writing
     c44:	ea000017 	b	ca8 <WRITE>

00000c48 <CHECKIFA>:

CHECKIFA:					CMP R1, #10				//Check if parameter value is A
     c48:	e351000a 	cmp	r1, #10
							BNE CHECKIFB			//If not check if b...
     c4c:	1a000001 	bne	c58 <CHECKIFB>
							MOV R1, #119 			//Move value 1110111 into R1 for later use
     c50:	e3a01077 	mov	r1, #119	; 0x77
							B WRITE					//Start writing
     c54:	ea000013 	b	ca8 <WRITE>

00000c58 <CHECKIFB>:

CHECKIFB:					CMP R1, #11				//Check if parameter value is b
     c58:	e351000b 	cmp	r1, #11
							BNE CHECKIFC			//If not check if C...
     c5c:	1a000001 	bne	c68 <CHECKIFC>
							MOV R1, #124 			//Move value 1111100 into R1 for later use
     c60:	e3a0107c 	mov	r1, #124	; 0x7c
							B WRITE					//Start writing
     c64:	ea00000f 	b	ca8 <WRITE>

00000c68 <CHECKIFC>:

CHECKIFC:					CMP R1, #12				//Check if parameter value is C
     c68:	e351000c 	cmp	r1, #12
							BNE CHECKIFD			//If not check if d...
     c6c:	1a000001 	bne	c78 <CHECKIFD>
							MOV R1, #57 			//Move value 0111001 into R1 for later use
     c70:	e3a01039 	mov	r1, #57	; 0x39
							B WRITE					//Start writing
     c74:	ea00000b 	b	ca8 <WRITE>

00000c78 <CHECKIFD>:

CHECKIFD:					CMP R1, #13				//Check if parameter value is d
     c78:	e351000d 	cmp	r1, #13
							BNE CHECKIFE			//If not check if E...
     c7c:	1a000001 	bne	c88 <CHECKIFE>
							MOV R1, #94 			//Move value 1011110 into R1 for later use
     c80:	e3a0105e 	mov	r1, #94	; 0x5e
							B WRITE					//Start writing
     c84:	ea000007 	b	ca8 <WRITE>

00000c88 <CHECKIFE>:

CHECKIFE:					CMP R1, #14				//Check if parameter value is E
     c88:	e351000e 	cmp	r1, #14
							BNE CHECKIFF			//If not check if F...
     c8c:	1a000001 	bne	c98 <CHECKIFF>
							MOV R1, #121 			//Move value 1111001 into R1 for later use
     c90:	e3a01079 	mov	r1, #121	; 0x79
							B WRITE					//Start writing
     c94:	ea000003 	b	ca8 <WRITE>

00000c98 <CHECKIFF>:

CHECKIFF:					CMP R1, #15				//Check if parameter value is F
     c98:	e351000f 	cmp	r1, #15
							BXNE LR					//If not return...
     c9c:	112fff1e 	bxne	lr
							MOV R1, #113 			//Move value 1110001 into R1 for later use
     ca0:	e3a01071 	mov	r1, #113	; 0x71
							B WRITE					//Start writing
     ca4:	eaffffff 	b	ca8 <WRITE>

00000ca8 <WRITE>:

WRITE:						CMP R5, #4				//Check if out of range HEX0-HEX3
     ca8:	e3550004 	cmp	r5, #4
							BGE ENDWRITE1			//If yes, setup for HEX4-HEX5
     cac:	aa00000a 	bge	cdc <ENDWRITE1>
							TST R0, R4				//AND HEX with R4 
     cb0:	e1100004 	tst	r0, r4
							BNE WRITETOHEX3_0		//If not equal, we can write
     cb4:	1a000002 	bne	cc4 <WRITETOHEX3_0>
							LSL R4, R4, #1			//Left shift comparison value
     cb8:	e1a04084 	lsl	r4, r4, #1
							ADD R5, R5, #1			//Increment counter
     cbc:	e2855001 	add	r5, r5, #1
							B WRITE					//Loop again
     cc0:	eafffff8 	b	ca8 <WRITE>

00000cc4 <WRITETOHEX3_0>:

WRITETOHEX3_0:				ADD R6, R5, R2			//Move location of next HEX value into R6
     cc4:	e0856002 	add	r6, r5, r2
							MOV R7, R1				//Move value to write into R7
     cc8:	e1a07001 	mov	r7, r1
							STRB R7, [R6]			//Store written value into memory of HEX value
     ccc:	e5c67000 	strb	r7, [r6]
							LSL R4, R4, #1			//Left shift comparison value
     cd0:	e1a04084 	lsl	r4, r4, #1
							ADD R5, R5, #1			//Increment counter
     cd4:	e2855001 	add	r5, r5, #1
							B WRITE					//Go back to write loop
     cd8:	eafffff2 	b	ca8 <WRITE>

00000cdc <ENDWRITE1>:

ENDWRITE1:					MOV R5, #0				//Reset counter
     cdc:	e3a05000 	mov	r5, #0

00000ce0 <WRITE2>:

WRITE2:						CMP R5, #2				//Check if done range HEX-HEX5
     ce0:	e3550002 	cmp	r5, #2
							BXGE LR					//If done, we can exit method and return to caller
     ce4:	a12fff1e 	bxge	lr
							TST R0, R4				//Compare HEX with comparison value
     ce8:	e1100004 	tst	r0, r4
							BNE WRITETOHEX5_4		//If not equal, we can write to HEX4-5
     cec:	1a000002 	bne	cfc <WRITETOHEX5_4>
							LSL R4, R4, #1			//Left shift compaison value
     cf0:	e1a04084 	lsl	r4, r4, #1
							ADD R5, R5, #1			//Increment counter
     cf4:	e2855001 	add	r5, r5, #1
							B WRITE2				//Loop again
     cf8:	eafffff8 	b	ce0 <WRITE2>

00000cfc <WRITETOHEX5_4>:

WRITETOHEX5_4:				ADD R6, R5, R3			//Move location of next HEX value into R6
     cfc:	e0856003 	add	r6, r5, r3
							MOV R7, R1				//Move value to write into R7
     d00:	e1a07001 	mov	r7, r1
							STRB R7, [R6]			//Store written value into memory of HEX value
     d04:	e5c67000 	strb	r7, [r6]
							LSL R4, R4, #1			//Left shift comparison value
     d08:	e1a04084 	lsl	r4, r4, #1
							ADD R5, R5, #1			//Increment counter
     d0c:	e2855001 	add	r5, r5, #1
							B WRITE2				//Loop to write2					
     d10:	eafffff2 	b	ce0 <WRITE2>
							.equ HEX5_to_HEX4, 0xFF200030
							.global HEX_clear_ASM
							.global HEX_flood_ASM
							.global HEX_write_ASM

HEX_clear_ASM: 				LDR R1, =HEX3_to_HEX0
     d14:	ff200020 	.word	0xff200020
							STRB R7, [R5]			//Store 0 into location
							LSL R3, R3, #1			//left shift comparison value
							ADD R4, R4, #1			//Increment counter
							B LOOP1

ENDLOOP1:					LDR R2, =HEX5_to_HEX4	//Memory location for Hex5 and Hex4	
     d18:	ff200030 	.word	0xff200030

00000d1c <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     d1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     d20:	e3a01000 	mov	r1, #0
	MOV R2, #1
     d24:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     d28:	e5907000 	ldr	r7, [r0]
	B LOOP
     d2c:	eaffffff 	b	d30 <LOOP>

00000d30 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     d30:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     d34:	0a000000 	beq	d3c <CONTINUE>
	BL CONFIG
     d38:	eb000004 	bl	d50 <CONFIG>

00000d3c <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     d3c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     d40:	e3510004 	cmp	r1, #4
	BLT LOOP
     d44:	bafffff9 	blt	d30 <LOOP>

00000d48 <DONE>:

DONE:
	POP {R4-R7, LR}
     d48:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     d4c:	e12fff1e 	bx	lr

00000d50 <CONFIG>:


CONFIG:
	PUSH {LR}
     d50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     d54:	e59f3148 	ldr	r3, [pc, #328]	; ea4 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     d58:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     d5c:	eb000005 	bl	d78 <DISABLE>
	BL SET_LOAD_VAL
     d60:	eb000008 	bl	d88 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     d64:	eb00000e 	bl	da4 <SET_LOAD_BIT>
	BL SET_INT_BIT
     d68:	eb000013 	bl	dbc <SET_INT_BIT>
	BL SET_EN_BIT
     d6c:	eb000019 	bl	dd8 <SET_EN_BIT>
	
	POP {LR}
     d70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     d74:	e12fff1e 	bx	lr

00000d78 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     d78:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     d7c:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     d80:	e5845008 	str	r5, [r4, #8]
	BX LR
     d84:	e12fff1e 	bx	lr

00000d88 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     d88:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     d8c:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     d90:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     d94:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     d98:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     d9c:	e5845000 	str	r5, [r4]
	BX LR
     da0:	e12fff1e 	bx	lr

00000da4 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     da4:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     da8:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     dac:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     db0:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     db4:	e5845008 	str	r5, [r4, #8]
	BX LR
     db8:	e12fff1e 	bx	lr

00000dbc <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     dbc:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     dc0:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     dc4:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     dc8:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     dcc:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     dd0:	e5845008 	str	r5, [r4, #8]
	BX LR
     dd4:	e12fff1e 	bx	lr

00000dd8 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     dd8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     ddc:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     de0:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     de4:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     de8:	e5845008 	str	r5, [r4, #8]
	BX LR
     dec:	e12fff1e 	bx	lr

00000df0 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     df0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     df4:	e3a01000 	mov	r1, #0
	MOV R2, #1
     df8:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     dfc:	eaffffff 	b	e00 <CLEAR_INT_LOOP>

00000e00 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     e00:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     e04:	0a000000 	beq	e0c <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     e08:	eb000005 	bl	e24 <CLEAR_INT>

00000e0c <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     e0c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     e10:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     e14:	bafffff9 	blt	e00 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     e18:	eaffffff 	b	e1c <CLEAR_INT_DONE>

00000e1c <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     e1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e20:	e12fff1e 	bx	lr

00000e24 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     e24:	e59f3078 	ldr	r3, [pc, #120]	; ea4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     e28:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     e2c:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     e30:	e12fff1e 	bx	lr

00000e34 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     e34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     e38:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     e3c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     e40:	e3a02001 	mov	r2, #1
	MOV R4, #0
     e44:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     e48:	eaffffff 	b	e4c <READ_INT_LOOP>

00000e4c <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     e4c:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     e50:	0a000000 	beq	e58 <READ_INT_CONTINUE>
	BL READ_INT
     e54:	eb000008 	bl	e7c <READ_INT>

00000e58 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     e58:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     e5c:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     e60:	0a000001 	beq	e6c <READ_INT_DONE>
	LSL R4, R4, #1
     e64:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     e68:	eafffff7 	b	e4c <READ_INT_LOOP>

00000e6c <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     e6c:	e1a00004 	mov	r0, r4
	POP {R4}
     e70:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     e74:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e78:	e12fff1e 	bx	lr

00000e7c <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     e7c:	e59f3020 	ldr	r3, [pc, #32]	; ea4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     e80:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     e84:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     e88:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     e8c:	e0244003 	eor	r4, r4, r3
	BX LR
     e90:	e12fff1e 	bx	lr

00000e94 <HPS_TIM_BASE>:
     e94:	ffc08000 	.word	0xffc08000
     e98:	ffc09000 	.word	0xffc09000
     e9c:	ffd00000 	.word	0xffd00000
     ea0:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     ea4:	00000e94 	.word	0x00000e94

00000ea8 <hps_tim0_int_flag>:
     ea8:	00000000 	.word	0x00000000

00000eac <button_interrupt_flag>:
     eac:	00000004 	.word	0x00000004

00000eb0 <A9_PRIV_TIM_ISR>:

button_interrupt_flag:
	.word 0x4

A9_PRIV_TIM_ISR:
	BX LR
     eb0:	e12fff1e 	bx	lr

00000eb4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     eb4:	e12fff1e 	bx	lr

00000eb8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     eb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
     ebc:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     ec0:	ebffffca 	bl	df0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     ec4:	e59f005c 	ldr	r0, [pc, #92]	; f28 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     ec8:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     ecc:	e5801000 	str	r1, [r0]

	POP {LR}
     ed0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     ed4:	e12fff1e 	bx	lr

00000ed8 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     ed8:	e12fff1e 	bx	lr

00000edc <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     edc:	e12fff1e 	bx	lr

00000ee0 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     ee0:	e12fff1e 	bx	lr

00000ee4 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     ee4:	e12fff1e 	bx	lr

00000ee8 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:	//For button interrupt
	PUSH {LR}
     ee8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	BL read_PB_edgecap_ASM
     eec:	eb00002b 	bl	fa0 <read_PB_edgecap_ASM>
	
	BL PB_edgecap_is_pressed_ASM	//Read and display the button pressed
     ef0:	eb00002d 	bl	fac <PB_edgecap_is_pressed_ASM>

	LDR R1, =button_interrupt_flag
     ef4:	e59f1030 	ldr	r1, [pc, #48]	; f2c <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]	//Store button # in interrupt variable
     ef8:	e5810000 	str	r0, [r1]
	MOV R0, #15
     efc:	e3a0000f 	mov	r0, #15
	BL PB_clear_edgecp_ASM	//Clear all in edgecap buttons
     f00:	eb000034 	bl	fd8 <PB_clear_edgecp_ASM>

	POP {LR}
     f04:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     f08:	e12fff1e 	bx	lr

00000f0c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     f0c:	e12fff1e 	bx	lr

00000f10 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     f10:	e12fff1e 	bx	lr

00000f14 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     f14:	e12fff1e 	bx	lr

00000f18 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     f18:	e12fff1e 	bx	lr

00000f1c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     f1c:	e12fff1e 	bx	lr

00000f20 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     f20:	e12fff1e 	bx	lr

00000f24 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     f24:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
     f28:	00000ea8 	.word	0x00000ea8
	
	BL read_PB_edgecap_ASM
	
	BL PB_edgecap_is_pressed_ASM	//Read and display the button pressed

	LDR R1, =button_interrupt_flag
     f2c:	00000eac 	.word	0x00000eac

00000f30 <read_LEDs_ASM>:
							.text
							.equ LED_BASE, 0xFF200000
							.global read_LEDs_ASM
							.global write_LEDs_ASM

read_LEDs_ASM: 				LDR R1, =LED_BASE
     f30:	e59f1010 	ldr	r1, [pc, #16]	; f48 <write_LEDs_ASM+0xc>
							LDR R0, [R1]
     f34:	e5910000 	ldr	r0, [r1]
							BX LR
     f38:	e12fff1e 	bx	lr

00000f3c <write_LEDs_ASM>:

write_LEDs_ASM:				LDR R1, =LED_BASE
     f3c:	e59f1004 	ldr	r1, [pc, #4]	; f48 <write_LEDs_ASM+0xc>
							STR R0, [R1]
     f40:	e5810000 	str	r0, [r1]
							BX LR 							 
     f44:	e12fff1e 	bx	lr
							.text
							.equ LED_BASE, 0xFF200000
							.global read_LEDs_ASM
							.global write_LEDs_ASM

read_LEDs_ASM: 				LDR R1, =LED_BASE
     f48:	ff200000 	.word	0xff200000

00000f4c <read_PB_data_ASM>:
							.global disable_PB_INT_ASM




read_PB_data_ASM:			LDR R1, =DATA
     f4c:	e59f10d0 	ldr	r1, [pc, #208]	; 1024 <disable_PB_INT_ASM+0x18>
							LDR R0, [R1]
     f50:	e5910000 	ldr	r0, [r1]
							BX LR
     f54:	e12fff1e 	bx	lr

00000f58 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM: 	CMP R0, #8	//If pb data 8 branch
     f58:	e3500008 	cmp	r0, #8
							BGE ISP3	
     f5c:	aa00000d 	bge	f98 <ISP3>
							CMP R0, #4	//If 4 branch
     f60:	e3500004 	cmp	r0, #4
							BGE ISP2
     f64:	aa000009 	bge	f90 <ISP2>
							CMP R0, #2	//If 2
     f68:	e3500002 	cmp	r0, #2
							BGE ISP1
     f6c:	aa000005 	bge	f88 <ISP1>
							CMP R0, #1	//If 1
     f70:	e3500001 	cmp	r0, #1
							BGE ISP0
     f74:	aa000001 	bge	f80 <ISP0>
							
							MOV R0, #4	//Else set button to none pressed
     f78:	e3a00004 	mov	r0, #4
							BX LR		
     f7c:	e12fff1e 	bx	lr

00000f80 <ISP0>:

ISP0:						MOV R0, #0	//Return the integer of the button that was pressed (First button = Button 0)
     f80:	e3a00000 	mov	r0, #0
							BX LR
     f84:	e12fff1e 	bx	lr

00000f88 <ISP1>:

ISP1:						MOV R0, #1	//Return button 1
     f88:	e3a00001 	mov	r0, #1
							BX LR
     f8c:	e12fff1e 	bx	lr

00000f90 <ISP2>:

ISP2:						MOV R0, #2	//Button 2
     f90:	e3a00002 	mov	r0, #2
							BX LR
     f94:	e12fff1e 	bx	lr

00000f98 <ISP3>:

ISP3:						MOV R0, #3	//Last button, never used
     f98:	e3a00003 	mov	r0, #3
							BX LR
     f9c:	e12fff1e 	bx	lr

00000fa0 <read_PB_edgecap_ASM>:
							

read_PB_edgecap_ASM:		LDR R1, =EDGECAPTURE
     fa0:	e59f1080 	ldr	r1, [pc, #128]	; 1028 <disable_PB_INT_ASM+0x1c>
							LDR R0, [R1]
     fa4:	e5910000 	ldr	r0, [r1]
							BX LR
     fa8:	e12fff1e 	bx	lr

00000fac <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	MOV R1, #4
     fac:	e3a01004 	mov	r1, #4
							TST R0, #8
     fb0:	e3100008 	tst	r0, #8
							MOVNE R1, #3
     fb4:	13a01003 	movne	r1, #3
							TST R0, #4
     fb8:	e3100004 	tst	r0, #4
							MOVNE R1, #2
     fbc:	13a01002 	movne	r1, #2
							TST R0, #2
     fc0:	e3100002 	tst	r0, #2
							MOVNE R1, #1
     fc4:	13a01001 	movne	r1, #1
							TST R0, #1
     fc8:	e3100001 	tst	r0, #1
							MOVNE R1, #0
     fcc:	13a01000 	movne	r1, #0
							MOV R0, R1
     fd0:	e1a00001 	mov	r0, r1
							BX LR
     fd4:	e12fff1e 	bx	lr

00000fd8 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:		LDR R1, =EDGECAPTURE
     fd8:	e59f1048 	ldr	r1, [pc, #72]	; 1028 <disable_PB_INT_ASM+0x1c>
							MOV R2, #0xFFFFFFFF	//Clear all
     fdc:	e3e02000 	mvn	r2, #0
							STR R2, [R1]
     fe0:	e5812000 	str	r2, [r1]
							BX LR
     fe4:	e12fff1e 	bx	lr

00000fe8 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:			LDR R1, =INTERRUPT
     fe8:	e59f103c 	ldr	r1, [pc, #60]	; 102c <disable_PB_INT_ASM+0x20>
							LDR R3, [R1]
     fec:	e5913000 	ldr	r3, [r1]
							CMP R1, #0		//If R1 is 0, we can store R0 directly
     ff0:	e3510000 	cmp	r1, #0
							BEQ STORE0
     ff4:	0a000002 	beq	1004 <STORE0>
							ORR R2, R0, R3	//Else we ORR so we do not change other values
     ff8:	e1802003 	orr	r2, r0, r3
							STR R2, [R1]	//Store result
     ffc:	e5812000 	str	r2, [r1]
							BX LR
    1000:	e12fff1e 	bx	lr

00001004 <STORE0>:

STORE0:						STR R0, [R1]
    1004:	e5810000 	str	r0, [r1]
							BX LR
    1008:	e12fff1e 	bx	lr

0000100c <disable_PB_INT_ASM>:
							

disable_PB_INT_ASM:			LDR R1, =INTERRUPT
    100c:	e59f1018 	ldr	r1, [pc, #24]	; 102c <disable_PB_INT_ASM+0x20>
							LDR R1, [R1]
    1010:	e5911000 	ldr	r1, [r1]
							MVN R0, R0	//Take complement of R0
    1014:	e1e00000 	mvn	r0, r0
							AND R0, R0, R1	//And it with R1 to not replace unwanted values
    1018:	e0000001 	and	r0, r0, r1
							STR R0, [R1]	//Store result
    101c:	e5810000 	str	r0, [r1]
							BX LR
    1020:	e12fff1e 	bx	lr
							.global disable_PB_INT_ASM




read_PB_data_ASM:			LDR R1, =DATA
    1024:	ff200050 	.word	0xff200050

ISP3:						MOV R0, #3	//Last button, never used
							BX LR
							

read_PB_edgecap_ASM:		LDR R1, =EDGECAPTURE
    1028:	ff20005c 	.word	0xff20005c
PB_clear_edgecp_ASM:		LDR R1, =EDGECAPTURE
							MOV R2, #0xFFFFFFFF	//Clear all
							STR R2, [R1]
							BX LR

enable_PB_INT_ASM:			LDR R1, =INTERRUPT
    102c:	ff200058 	.word	0xff200058

00001030 <read_slider_switches_ASM>:
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM: 	LDR R1, =SW_BASE
    1030:	e59f1004 	ldr	r1, [pc, #4]	; 103c <read_slider_switches_ASM+0xc>
							LDR R0, [R1]
    1034:	e5910000 	ldr	r0, [r1]
							BX LR 
    1038:	e12fff1e 	bx	lr
							.text
							.equ SW_BASE, 0xFF200040
							.global read_slider_switches_ASM

read_slider_switches_ASM: 	LDR R1, =SW_BASE
    103c:	ff200040 	.word	0xff200040

00001040 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1040:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1044:	e28db000 	add	r11, sp, #0
    1048:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    104c:	e3a030d3 	mov	r3, #211	; 0xd3
    1050:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1054:	e51b3008 	ldr	r3, [r11, #-8]
    1058:	e129f003 	msr	CPSR_fc, r3
}
    105c:	e28bd000 	add	sp, r11, #0
    1060:	e8bd0800 	ldmfd	sp!, {r11}
    1064:	e12fff1e 	bx	lr

00001068 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    1068:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    106c:	e28db000 	add	r11, sp, #0
    1070:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    1074:	e3a03053 	mov	r3, #83	; 0x53
    1078:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    107c:	e51b3008 	ldr	r3, [r11, #-8]
    1080:	e129f003 	msr	CPSR_fc, r3
}
    1084:	e28bd000 	add	sp, r11, #0
    1088:	e8bd0800 	ldmfd	sp!, {r11}
    108c:	e12fff1e 	bx	lr

00001090 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1090:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1094:	e28db000 	add	r11, sp, #0
    1098:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    109c:	e3e03007 	mvn	r3, #7
    10a0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    10a4:	e3a030d2 	mov	r3, #210	; 0xd2
    10a8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    10ac:	e51b300c 	ldr	r3, [r11, #-12]
    10b0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    10b4:	e51b3008 	ldr	r3, [r11, #-8]
    10b8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    10bc:	e3a030d3 	mov	r3, #211	; 0xd3
    10c0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    10c4:	e51b300c 	ldr	r3, [r11, #-12]
    10c8:	e129f003 	msr	CPSR_fc, r3
}
    10cc:	e28bd000 	add	sp, r11, #0
    10d0:	e8bd0800 	ldmfd	sp!, {r11}
    10d4:	e12fff1e 	bx	lr

000010d8 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    10d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10dc:	e28db000 	add	r11, sp, #0
    10e0:	e24dd01c 	sub	sp, sp, #28
    10e4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    10e8:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    10ec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    10f0:	e1a031c3 	asr	r3, r3, #3
    10f4:	e3c33003 	bic	r3, r3, #3
    10f8:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    10fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1100:	e203301f 	and	r3, r3, #31
    1104:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1108:	e3a02001 	mov	r2, #1
    110c:	e51b300c 	ldr	r3, [r11, #-12]
    1110:	e1a03312 	lsl	r3, r2, r3
    1114:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1118:	e51b3008 	ldr	r3, [r11, #-8]
    111c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1120:	e2433c03 	sub	r3, r3, #768	; 0x300
    1124:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1128:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    112c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1130:	e5921000 	ldr	r1, [r2]
    1134:	e51b2010 	ldr	r2, [r11, #-16]
    1138:	e1812002 	orr	r2, r1, r2
    113c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1140:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1144:	e3c33003 	bic	r3, r3, #3
    1148:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    114c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1150:	e2033003 	and	r3, r3, #3
    1154:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1158:	e51b2008 	ldr	r2, [r11, #-8]
    115c:	e51b300c 	ldr	r3, [r11, #-12]
    1160:	e0823003 	add	r3, r2, r3
    1164:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1168:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    116c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1170:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1174:	e6ef2072 	uxtb	r2, r2
    1178:	e5c32000 	strb	r2, [r3]
}
    117c:	e28bd000 	add	sp, r11, #0
    1180:	e8bd0800 	ldmfd	sp!, {r11}
    1184:	e12fff1e 	bx	lr

00001188 <config_GIC>:

void config_GIC(int len, int* IDs) {
    1188:	e92d4800 	push	{r11, lr}
    118c:	e28db004 	add	r11, sp, #4
    1190:	e24dd010 	sub	sp, sp, #16
    1194:	e50b0010 	str	r0, [r11, #-16]
    1198:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    119c:	e3a03000 	mov	r3, #0
    11a0:	e50b3008 	str	r3, [r11, #-8]
    11a4:	ea00000a 	b	11d4 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    11a8:	e51b3008 	ldr	r3, [r11, #-8]
    11ac:	e1a03103 	lsl	r3, r3, #2
    11b0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    11b4:	e0823003 	add	r3, r2, r3
    11b8:	e5933000 	ldr	r3, [r3]
    11bc:	e1a00003 	mov	r0, r3
    11c0:	e3a01001 	mov	r1, #1
    11c4:	ebffffc3 	bl	10d8 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    11c8:	e51b3008 	ldr	r3, [r11, #-8]
    11cc:	e2833001 	add	r3, r3, #1
    11d0:	e50b3008 	str	r3, [r11, #-8]
    11d4:	e51b2008 	ldr	r2, [r11, #-8]
    11d8:	e51b3010 	ldr	r3, [r11, #-16]
    11dc:	e1520003 	cmp	r2, r3
    11e0:	bafffff0 	blt	11a8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    11e4:	e30c3104 	movw	r3, #49412	; 0xc104
    11e8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    11ec:	e30f2fff 	movw	r2, #65535	; 0xffff
    11f0:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    11f4:	e3a03cc1 	mov	r3, #49408	; 0xc100
    11f8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    11fc:	e3a02001 	mov	r2, #1
    1200:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1204:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1208:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    120c:	e3a02001 	mov	r2, #1
    1210:	e5832000 	str	r2, [r3]
}
    1214:	e24bd004 	sub	sp, r11, #4
    1218:	e8bd8800 	pop	{r11, pc}

0000121c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    121c:	e24ee004 	sub	lr, lr, #4
    1220:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1224:	e28db018 	add	r11, sp, #24
    1228:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    122c:	e30c310c 	movw	r3, #49420	; 0xc10c
    1230:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1234:	e5933000 	ldr	r3, [r3]
    1238:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    123c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1240:	e3530053 	cmp	r3, #83	; 0x53
    1244:	0a00003d 	beq	1340 <__cs3_isr_irq+0x124>
    1248:	e3530053 	cmp	r3, #83	; 0x53
    124c:	ca000011 	bgt	1298 <__cs3_isr_irq+0x7c>
    1250:	e353004e 	cmp	r3, #78	; 0x4e
    1254:	0a000031 	beq	1320 <__cs3_isr_irq+0x104>
    1258:	e353004e 	cmp	r3, #78	; 0x4e
    125c:	ca000006 	bgt	127c <__cs3_isr_irq+0x60>
    1260:	e3530048 	cmp	r3, #72	; 0x48
    1264:	0a000029 	beq	1310 <__cs3_isr_irq+0xf4>
    1268:	e3530049 	cmp	r3, #73	; 0x49
    126c:	0a000029 	beq	1318 <__cs3_isr_irq+0xfc>
    1270:	e353001d 	cmp	r3, #29
    1274:	0a000019 	beq	12e0 <__cs3_isr_irq+0xc4>
    1278:	ea000036 	b	1358 <__cs3_isr_irq+0x13c>
    127c:	e3530050 	cmp	r3, #80	; 0x50
    1280:	0a00002a 	beq	1330 <__cs3_isr_irq+0x114>
    1284:	e3530050 	cmp	r3, #80	; 0x50
    1288:	ba000026 	blt	1328 <__cs3_isr_irq+0x10c>
    128c:	e3530051 	cmp	r3, #81	; 0x51
    1290:	0a000028 	beq	1338 <__cs3_isr_irq+0x11c>
    1294:	ea00002f 	b	1358 <__cs3_isr_irq+0x13c>
    1298:	e35300c7 	cmp	r3, #199	; 0xc7
    129c:	0a000013 	beq	12f0 <__cs3_isr_irq+0xd4>
    12a0:	e35300c7 	cmp	r3, #199	; 0xc7
    12a4:	ca000006 	bgt	12c4 <__cs3_isr_irq+0xa8>
    12a8:	e3530059 	cmp	r3, #89	; 0x59
    12ac:	0a000027 	beq	1350 <__cs3_isr_irq+0x134>
    12b0:	e35300c5 	cmp	r3, #197	; 0xc5
    12b4:	0a00000b 	beq	12e8 <__cs3_isr_irq+0xcc>
    12b8:	e3530054 	cmp	r3, #84	; 0x54
    12bc:	0a000021 	beq	1348 <__cs3_isr_irq+0x12c>
    12c0:	ea000024 	b	1358 <__cs3_isr_irq+0x13c>
    12c4:	e35300c9 	cmp	r3, #201	; 0xc9
    12c8:	0a00000c 	beq	1300 <__cs3_isr_irq+0xe4>
    12cc:	e35300c9 	cmp	r3, #201	; 0xc9
    12d0:	ba000008 	blt	12f8 <__cs3_isr_irq+0xdc>
    12d4:	e35300ca 	cmp	r3, #202	; 0xca
    12d8:	0a00000a 	beq	1308 <__cs3_isr_irq+0xec>
    12dc:	ea00001d 	b	1358 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    12e0:	ebfffef2 	bl	eb0 <A9_PRIV_TIM_ISR>
    12e4:	ea00001c 	b	135c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    12e8:	ebfffef1 	bl	eb4 <HPS_GPIO1_ISR>
    12ec:	ea00001a 	b	135c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    12f0:	ebfffef0 	bl	eb8 <HPS_TIM0_ISR>
    12f4:	ea000018 	b	135c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    12f8:	ebfffef6 	bl	ed8 <HPS_TIM1_ISR>
    12fc:	ea000016 	b	135c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1300:	ebfffef5 	bl	edc <HPS_TIM2_ISR>
    1304:	ea000014 	b	135c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1308:	ebfffef4 	bl	ee0 <HPS_TIM3_ISR>
    130c:	ea000012 	b	135c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1310:	ebfffef3 	bl	ee4 <FPGA_INTERVAL_TIM_ISR>
    1314:	ea000010 	b	135c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR();break;
    1318:	ebfffef2 	bl	ee8 <FPGA_PB_KEYS_ISR>
    131c:	ea00000e 	b	135c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1320:	ebfffef9 	bl	f0c <FPGA_Audio_ISR>
    1324:	ea00000c 	b	135c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1328:	ebfffef8 	bl	f10 <FPGA_PS2_ISR>
    132c:	ea00000a 	b	135c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1330:	ebfffef7 	bl	f14 <FPGA_JTAG_ISR>
    1334:	ea000008 	b	135c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1338:	ebfffef6 	bl	f18 <FPGA_IrDA_ISR>
    133c:	ea000006 	b	135c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1340:	ebfffef5 	bl	f1c <FPGA_JP1_ISR>
    1344:	ea000004 	b	135c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1348:	ebfffef4 	bl	f20 <FPGA_JP2_ISR>
    134c:	ea000002 	b	135c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1350:	ebfffef3 	bl	f24 <FPGA_PS2_DUAL_ISR>
    1354:	ea000000 	b	135c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1358:	eafffffe 	b	1358 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    135c:	e30c3110 	movw	r3, #49424	; 0xc110
    1360:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1364:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1368:	e5832000 	str	r2, [r3]
}
    136c:	e24bd018 	sub	sp, r11, #24
    1370:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001374 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    1374:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1378:	e28db000 	add	r11, sp, #0
	while(1);
    137c:	eafffffe 	b	137c <__cs3_reset+0x8>

00001380 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1380:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1384:	e28db000 	add	r11, sp, #0
	while(1);
    1388:	eafffffe 	b	1388 <__cs3_isr_undef+0x8>

0000138c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    138c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1390:	e28db000 	add	r11, sp, #0
	while(1);
    1394:	eafffffe 	b	1394 <__cs3_isr_swi+0x8>

00001398 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1398:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    139c:	e28db000 	add	r11, sp, #0
	while(1);
    13a0:	eafffffe 	b	13a0 <__cs3_isr_pabort+0x8>

000013a4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    13a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13a8:	e28db000 	add	r11, sp, #0
	while(1);
    13ac:	eafffffe 	b	13ac <__cs3_isr_dabort+0x8>

000013b0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    13b0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13b4:	e28db000 	add	r11, sp, #0
	while(1);
    13b8:	eafffffe 	b	13b8 <__cs3_isr_fiq+0x8>

000013bc <fix_bug>:
}

void fix_bug() {
    13bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13c0:	e28db000 	add	r11, sp, #0
    13c4:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    13c8:	e30d3198 	movw	r3, #53656	; 0xd198
    13cc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    13d0:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    13d4:	e51b3008 	ldr	r3, [r11, #-8]
    13d8:	e3a02703 	mov	r2, #786432	; 0xc0000
    13dc:	e5832000 	str	r2, [r3]
}
    13e0:	e28bd000 	add	sp, r11, #0
    13e4:	e8bd0800 	ldmfd	sp!, {r11}
    13e8:	e12fff1e 	bx	lr

000013ec <int_setup>:

void int_setup(int len, int* IDs) {
    13ec:	e92d4800 	push	{r11, lr}
    13f0:	e28db004 	add	r11, sp, #4
    13f4:	e24dd008 	sub	sp, sp, #8
    13f8:	e50b0008 	str	r0, [r11, #-8]
    13fc:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1400:	ebffff0e 	bl	1040 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1404:	ebffff21 	bl	1090 <set_A9_IRQ_stack>
	fix_bug();
    1408:	ebffffeb 	bl	13bc <fix_bug>
	config_GIC(len, IDs);
    140c:	e51b0008 	ldr	r0, [r11, #-8]
    1410:	e51b100c 	ldr	r1, [r11, #-12]
    1414:	ebffff5b 	bl	1188 <config_GIC>
	enable_A9_interrupts();
    1418:	ebffff12 	bl	1068 <enable_A9_interrupts>
}
    141c:	e24bd004 	sub	sp, r11, #4
    1420:	e8bd8800 	pop	{r11, pc}

00001424 <atexit>:
    1424:	e1a01000 	mov	r1, r0
    1428:	e3a00000 	mov	r0, #0
    142c:	e92d4008 	push	{r3, lr}
    1430:	e1a02000 	mov	r2, r0
    1434:	e1a03000 	mov	r3, r0
    1438:	eb00000e 	bl	1478 <__register_exitproc>
    143c:	e8bd4008 	pop	{r3, lr}
    1440:	e12fff1e 	bx	lr

00001444 <exit>:
    1444:	e92d4008 	push	{r3, lr}
    1448:	e3a01000 	mov	r1, #0
    144c:	e1a04000 	mov	r4, r0
    1450:	eb000045 	bl	156c <__call_exitprocs>
    1454:	e59f3018 	ldr	r3, [pc, #24]	; 1474 <exit+0x30>
    1458:	e5930000 	ldr	r0, [r3]
    145c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1460:	e3530000 	cmp	r3, #0
    1464:	11a0e00f 	movne	lr, pc
    1468:	112fff13 	bxne	r3
    146c:	e1a00004 	mov	r0, r4
    1470:	eb0000c9 	bl	179c <_exit>
    1474:	0000184c 	.word	0x0000184c

00001478 <__register_exitproc>:
    1478:	e59fc0e4 	ldr	r12, [pc, #228]	; 1564 <__register_exitproc+0xec>
    147c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1480:	e59c4000 	ldr	r4, [r12]
    1484:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1488:	e35c0000 	cmp	r12, #0
    148c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1490:	e59c5004 	ldr	r5, [r12, #4]
    1494:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1498:	e355001f 	cmp	r5, #31
    149c:	e24dd010 	sub	sp, sp, #16
    14a0:	e1a06000 	mov	r6, r0
    14a4:	da000015 	ble	1500 <__register_exitproc+0x88>
    14a8:	e59f00b8 	ldr	r0, [pc, #184]	; 1568 <__register_exitproc+0xf0>
    14ac:	e3500000 	cmp	r0, #0
    14b0:	1a000001 	bne	14bc <__register_exitproc+0x44>
    14b4:	e3e00000 	mvn	r0, #0
    14b8:	ea000018 	b	1520 <__register_exitproc+0xa8>
    14bc:	e3a00e19 	mov	r0, #400	; 0x190
    14c0:	e58d100c 	str	r1, [sp, #12]
    14c4:	e58d2008 	str	r2, [sp, #8]
    14c8:	e58d3004 	str	r3, [sp, #4]
    14cc:	e320f000 	nop	{0}
    14d0:	e250c000 	subs	r12, r0, #0
    14d4:	e59d100c 	ldr	r1, [sp, #12]
    14d8:	e59d2008 	ldr	r2, [sp, #8]
    14dc:	e59d3004 	ldr	r3, [sp, #4]
    14e0:	0afffff3 	beq	14b4 <__register_exitproc+0x3c>
    14e4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    14e8:	e3a00000 	mov	r0, #0
    14ec:	e58c0004 	str	r0, [r12, #4]
    14f0:	e58c5000 	str	r5, [r12]
    14f4:	e584c148 	str	r12, [r4, #328]	; 0x148
    14f8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    14fc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1500:	e3560000 	cmp	r6, #0
    1504:	e59c4004 	ldr	r4, [r12, #4]
    1508:	1a000007 	bne	152c <__register_exitproc+0xb4>
    150c:	e2843002 	add	r3, r4, #2
    1510:	e2844001 	add	r4, r4, #1
    1514:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1518:	e58c4004 	str	r4, [r12, #4]
    151c:	e3a00000 	mov	r0, #0
    1520:	e28dd010 	add	sp, sp, #16
    1524:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1528:	e12fff1e 	bx	lr
    152c:	e3a00001 	mov	r0, #1
    1530:	e1a00410 	lsl	r0, r0, r4
    1534:	e08c8104 	add	r8, r12, r4, lsl #2
    1538:	e3560002 	cmp	r6, #2
    153c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1540:	e5883108 	str	r3, [r8, #264]	; 0x108
    1544:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1548:	e1877000 	orr	r7, r7, r0
    154c:	01830000 	orreq	r0, r3, r0
    1550:	e1a05008 	mov	r5, r8
    1554:	e5882088 	str	r2, [r8, #136]	; 0x88
    1558:	e58c7188 	str	r7, [r12, #392]	; 0x188
    155c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1560:	eaffffe9 	b	150c <__register_exitproc+0x94>
    1564:	0000184c 	.word	0x0000184c
    1568:	00000000 	.word	0x00000000

0000156c <__call_exitprocs>:
    156c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1570:	e59f3168 	ldr	r3, [pc, #360]	; 16e0 <__call_exitprocs+0x174>
    1574:	e5933000 	ldr	r3, [r3]
    1578:	e24dd014 	sub	sp, sp, #20
    157c:	e58d3004 	str	r3, [sp, #4]
    1580:	e2833f52 	add	r3, r3, #328	; 0x148
    1584:	e58d0008 	str	r0, [sp, #8]
    1588:	e58d300c 	str	r3, [sp, #12]
    158c:	e1a07001 	mov	r7, r1
    1590:	e3a08001 	mov	r8, #1
    1594:	e59d3004 	ldr	r3, [sp, #4]
    1598:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    159c:	e3560000 	cmp	r6, #0
    15a0:	e59db00c 	ldr	r11, [sp, #12]
    15a4:	0a000033 	beq	1678 <__call_exitprocs+0x10c>
    15a8:	e5965004 	ldr	r5, [r6, #4]
    15ac:	e2554001 	subs	r4, r5, #1
    15b0:	5286a088 	addpl	r10, r6, #136	; 0x88
    15b4:	5285501f 	addpl	r5, r5, #31
    15b8:	508a5105 	addpl	r5, r10, r5, lsl #2
    15bc:	5a000007 	bpl	15e0 <__call_exitprocs+0x74>
    15c0:	ea000029 	b	166c <__call_exitprocs+0x100>
    15c4:	e5953000 	ldr	r3, [r5]
    15c8:	e1530007 	cmp	r3, r7
    15cc:	0a000005 	beq	15e8 <__call_exitprocs+0x7c>
    15d0:	e2444001 	sub	r4, r4, #1
    15d4:	e3740001 	cmn	r4, #1
    15d8:	e2455004 	sub	r5, r5, #4
    15dc:	0a000022 	beq	166c <__call_exitprocs+0x100>
    15e0:	e3570000 	cmp	r7, #0
    15e4:	1afffff6 	bne	15c4 <__call_exitprocs+0x58>
    15e8:	e5963004 	ldr	r3, [r6, #4]
    15ec:	e06a2005 	rsb	r2, r10, r5
    15f0:	e2433001 	sub	r3, r3, #1
    15f4:	e0862002 	add	r2, r6, r2
    15f8:	e1530004 	cmp	r3, r4
    15fc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1600:	13a01000 	movne	r1, #0
    1604:	05864004 	streq	r4, [r6, #4]
    1608:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    160c:	e3530000 	cmp	r3, #0
    1610:	0affffee 	beq	15d0 <__call_exitprocs+0x64>
    1614:	e1a02418 	lsl	r2, r8, r4
    1618:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    161c:	e1120001 	tst	r2, r1
    1620:	e5969004 	ldr	r9, [r6, #4]
    1624:	0a000016 	beq	1684 <__call_exitprocs+0x118>
    1628:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    162c:	e1120001 	tst	r2, r1
    1630:	1a000016 	bne	1690 <__call_exitprocs+0x124>
    1634:	e59d0008 	ldr	r0, [sp, #8]
    1638:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    163c:	e1a0e00f 	mov	lr, pc
    1640:	e12fff13 	bx	r3
    1644:	e5963004 	ldr	r3, [r6, #4]
    1648:	e1530009 	cmp	r3, r9
    164c:	1affffd0 	bne	1594 <__call_exitprocs+0x28>
    1650:	e59b3000 	ldr	r3, [r11]
    1654:	e1530006 	cmp	r3, r6
    1658:	1affffcd 	bne	1594 <__call_exitprocs+0x28>
    165c:	e2444001 	sub	r4, r4, #1
    1660:	e3740001 	cmn	r4, #1
    1664:	e2455004 	sub	r5, r5, #4
    1668:	1affffdc 	bne	15e0 <__call_exitprocs+0x74>
    166c:	e59f1070 	ldr	r1, [pc, #112]	; 16e4 <__call_exitprocs+0x178>
    1670:	e3510000 	cmp	r1, #0
    1674:	1a000009 	bne	16a0 <__call_exitprocs+0x134>
    1678:	e28dd014 	add	sp, sp, #20
    167c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1680:	e12fff1e 	bx	lr
    1684:	e1a0e00f 	mov	lr, pc
    1688:	e12fff13 	bx	r3
    168c:	eaffffec 	b	1644 <__call_exitprocs+0xd8>
    1690:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1694:	e1a0e00f 	mov	lr, pc
    1698:	e12fff13 	bx	r3
    169c:	eaffffe8 	b	1644 <__call_exitprocs+0xd8>
    16a0:	e5963004 	ldr	r3, [r6, #4]
    16a4:	e3530000 	cmp	r3, #0
    16a8:	e5963000 	ldr	r3, [r6]
    16ac:	1a000008 	bne	16d4 <__call_exitprocs+0x168>
    16b0:	e3530000 	cmp	r3, #0
    16b4:	0a000006 	beq	16d4 <__call_exitprocs+0x168>
    16b8:	e1a00006 	mov	r0, r6
    16bc:	e58b3000 	str	r3, [r11]
    16c0:	e320f000 	nop	{0}
    16c4:	e59b6000 	ldr	r6, [r11]
    16c8:	e3560000 	cmp	r6, #0
    16cc:	1affffb5 	bne	15a8 <__call_exitprocs+0x3c>
    16d0:	eaffffe8 	b	1678 <__call_exitprocs+0x10c>
    16d4:	e1a0b006 	mov	r11, r6
    16d8:	e1a06003 	mov	r6, r3
    16dc:	eafffff9 	b	16c8 <__call_exitprocs+0x15c>
    16e0:	0000184c 	.word	0x0000184c
    16e4:	00000000 	.word	0x00000000

000016e8 <register_fini>:
    16e8:	e92d4008 	push	{r3, lr}
    16ec:	e59f3010 	ldr	r3, [pc, #16]	; 1704 <register_fini+0x1c>
    16f0:	e3530000 	cmp	r3, #0
    16f4:	159f000c 	ldrne	r0, [pc, #12]	; 1708 <register_fini+0x20>
    16f8:	1bffff49 	blne	1424 <atexit>
    16fc:	e8bd4008 	pop	{r3, lr}
    1700:	e12fff1e 	bx	lr
    1704:	00001874 	.word	0x00001874
    1708:	0000170c 	.word	0x0000170c

0000170c <__libc_fini_array>:
    170c:	e92d4038 	push	{r3, r4, r5, lr}
    1710:	e59f5030 	ldr	r5, [pc, #48]	; 1748 <__libc_fini_array+0x3c>
    1714:	e59f4030 	ldr	r4, [pc, #48]	; 174c <__libc_fini_array+0x40>
    1718:	e0654004 	rsb	r4, r5, r4
    171c:	e1b04144 	asrs	r4, r4, #2
    1720:	10855104 	addne	r5, r5, r4, lsl #2
    1724:	0a000004 	beq	173c <__libc_fini_array+0x30>
    1728:	e5353004 	ldr	r3, [r5, #-4]!
    172c:	e1a0e00f 	mov	lr, pc
    1730:	e12fff13 	bx	r3
    1734:	e2544001 	subs	r4, r4, #1
    1738:	1afffffa 	bne	1728 <__libc_fini_array+0x1c>
    173c:	eb00004c 	bl	1874 <__libc_fini>
    1740:	e8bd4038 	pop	{r3, r4, r5, lr}
    1744:	e12fff1e 	bx	lr
    1748:	0000188c 	.word	0x0000188c
    174c:	00001890 	.word	0x00001890

00001750 <__cs3_premain>:
    1750:	e92d4008 	push	{r3, lr}
    1754:	eb000017 	bl	17b8 <__libc_init_array>
    1758:	e59f3030 	ldr	r3, [pc, #48]	; 1790 <__cs3_premain+0x40>
    175c:	e3530000 	cmp	r3, #0
    1760:	15930000 	ldrne	r0, [r3]
    1764:	01a00003 	moveq	r0, r3
    1768:	e59f3024 	ldr	r3, [pc, #36]	; 1794 <__cs3_premain+0x44>
    176c:	e3530000 	cmp	r3, #0
    1770:	15931000 	ldrne	r1, [r3]
    1774:	01a01003 	moveq	r1, r3
    1778:	e3a02000 	mov	r2, #0
    177c:	ebfffab6 	bl	25c <main>
    1780:	e59f3010 	ldr	r3, [pc, #16]	; 1798 <__cs3_premain+0x48>
    1784:	e3530000 	cmp	r3, #0
    1788:	1bffff2d 	blne	1444 <exit>
    178c:	eafffffe 	b	178c <__cs3_premain+0x3c>
	...
    1798:	00001444 	.word	0x00001444

0000179c <_exit>:
    179c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    17a0:	e3a00018 	mov	r0, #24
    17a4:	e59f1004 	ldr	r1, [pc, #4]	; 17b0 <_exit+0x14>
    17a8:	ef123456 	svc	0x00123456
    17ac:	eafffffe 	b	17ac <_exit+0x10>
    17b0:	00020026 	.word	0x00020026

000017b4 <__cs3_isr_interrupt>:
    17b4:	eafffffe 	b	17b4 <__cs3_isr_interrupt>

000017b8 <__libc_init_array>:
    17b8:	e92d4070 	push	{r4, r5, r6, lr}
    17bc:	e59f506c 	ldr	r5, [pc, #108]	; 1830 <__libc_init_array+0x78>
    17c0:	e59f606c 	ldr	r6, [pc, #108]	; 1834 <__libc_init_array+0x7c>
    17c4:	e0656006 	rsb	r6, r5, r6
    17c8:	e1b06146 	asrs	r6, r6, #2
    17cc:	12455004 	subne	r5, r5, #4
    17d0:	13a04000 	movne	r4, #0
    17d4:	0a000005 	beq	17f0 <__libc_init_array+0x38>
    17d8:	e5b53004 	ldr	r3, [r5, #4]!
    17dc:	e2844001 	add	r4, r4, #1
    17e0:	e1a0e00f 	mov	lr, pc
    17e4:	e12fff13 	bx	r3
    17e8:	e1560004 	cmp	r6, r4
    17ec:	1afffff9 	bne	17d8 <__libc_init_array+0x20>
    17f0:	e59f5040 	ldr	r5, [pc, #64]	; 1838 <__libc_init_array+0x80>
    17f4:	e59f6040 	ldr	r6, [pc, #64]	; 183c <__libc_init_array+0x84>
    17f8:	e0656006 	rsb	r6, r5, r6
    17fc:	eb000014 	bl	1854 <_init>
    1800:	e1b06146 	asrs	r6, r6, #2
    1804:	12455004 	subne	r5, r5, #4
    1808:	13a04000 	movne	r4, #0
    180c:	0a000005 	beq	1828 <__libc_init_array+0x70>
    1810:	e5b53004 	ldr	r3, [r5, #4]!
    1814:	e2844001 	add	r4, r4, #1
    1818:	e1a0e00f 	mov	lr, pc
    181c:	e12fff13 	bx	r3
    1820:	e1560004 	cmp	r6, r4
    1824:	1afffff9 	bne	1810 <__libc_init_array+0x58>
    1828:	e8bd4070 	pop	{r4, r5, r6, lr}
    182c:	e12fff1e 	bx	lr
    1830:	0000186c 	.word	0x0000186c
    1834:	0000186c 	.word	0x0000186c
    1838:	0000186c 	.word	0x0000186c
    183c:	00001874 	.word	0x00001874

Disassembly of section .rodata:

00001844 <_global_impure_ptr-0x8>:
    1844:	000000c7 	.word	0x000000c7
    1848:	00000049 	.word	0x00000049

0000184c <_global_impure_ptr>:
    184c:	000018b8 00000043                       ....C...

00001854 <_init>:
    1854:	e1a0c00d 	mov	r12, sp
    1858:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    185c:	e24cb004 	sub	r11, r12, #4
    1860:	e24bd028 	sub	sp, r11, #40	; 0x28
    1864:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1868:	e12fff1e 	bx	lr

0000186c <__init_array_start>:
    186c:	000016e8 	.word	0x000016e8

00001870 <__frame_dummy_init_array_entry>:
    1870:	00000208                                ....

00001874 <__libc_fini>:
    1874:	e1a0c00d 	mov	r12, sp
    1878:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    187c:	e24cb004 	sub	r11, r12, #4
    1880:	e24bd028 	sub	sp, r11, #40	; 0x28
    1884:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1888:	e12fff1e 	bx	lr

0000188c <__fini_array_start>:
    188c:	000001c4 	.word	0x000001c4

00001890 <__cs3_regions>:
    1890:	00000000 	.word	0x00000000
    1894:	00000040 	.word	0x00000040
    1898:	00000040 	.word	0x00000040
    189c:	00001ca8 	.word	0x00001ca8
    18a0:	00000020 	.word	0x00000020

000018a4 <__cs3_regions_end>:
    18a4:	00000000 	.word	0x00000000
